"""
version 23-02-21
this is a Julia file
--------------
The identifiers in Julia allow Unicode names (in UTF-8 encoding), e.g., 
QΛ′ = zeros(BigFloat,5) 
x⃰ = 0       (obtained as x\asteraccent [tab] = 0)
P̂′ = 2 
(note that ′ here is not connected to derivation or transpose).

However, putting the hat on a Greek character is not so easy 
(despite assured on https://docs.julialang.org/en/v1/manual/variables/
and on https://mono-math.netlify.app/#JuliaMono; the latter shows an
amazing set of possibilities, resembling more like a LaTeX output).
"""

"""
---------------
Julia program for studying the Q-orders,
by computing Q(k), QL(k), QΛ(k), Q′(k), QL′(k), QΛ′(k)
for Example 4.24 in
E. Catinas, How many steps still left to x*?, SIAM Review, 2021

problem: f(x) = x + x^(1+α) = 0 (α= 1, 2 or 3); x*=0
method:  the secant method
results: Q-order (1+sqrt(1+4α))/2 = λ_α, and moreover, when
α=1: C-order λ₁≈1.6 (the golden mean)
α=2: no C-order, but exact Q-order λ₂=2
α=3: no C-order, no exact Q-order, but just Q-order λ₃

"""


setprecision(300)   #52 corresponds to the usual double precision
println("epsBigFl=","\n",eps(BigFloat),"\n")   # the ϵ for increased precision numbers
N = 20  # max no of iterations
α = BigFloat(1.0)  #parameter in f(x) = x + x^(1+α)
p = BigFloat((1+sqrt(1+4α))/2)     #true Q-order for the secant method
println("true Q-order secant method for fα(x) is:\np=",p)
function f(x,α)
    x + x^(1+α)
end

x = zeros(BigFloat,N)
x[1] = BigFloat(0.5)
xc = BigFloat(1/α^p)  #current x
println("##########################################","\n","secant iterates")
global k = 1

while xc != 0
    global k = k + 1
    global xc
    x[k] = xc
    xc = x[k] - f(x[k],α)/(f(x[k],α) - f(x[k-1],α))*(x[k] - x[k-1])
    println("k=",k,"\n x=",x[k],"\n")
end
n = k
e = abs.(x);  #xₖ becomes error eₖ for each component

println("############################","\n","Qp","\n")
Qp = zeros(BigFloat,n)
for k=2:n
    Qp[k]=e[k]/e[k-1]^p
    println("k=",k-1)
    println("Qp=",Qp[k],"\n")
end

println("=================================","\n","QL, QΛ","\n")
QL = zeros(BigFloat,n)
QΛ = zeros(BigFloat,n)
QL[2] = log(e[2])/log(e[1])
println("k=2\nQL(2)=     ",QL[2],"\n","|p-QL(2)|= ",abs(QL[2]-p),"\n")
for k=3:n
    QL[k] = log(e[k])/log(e[k-1])
    QΛ[k] = log(e[k]/e[k-1])/log(e[k-1]/e[k-2])
    println("\nk=",k,"\n","QL(k)=     ",QL[k])
    println("|p-QL(k)|= ",abs(QL[k]-p))
    println("QΛ(k)=     ",QΛ[k])
    println("|p-QΛ(k)|= ",abs(QΛ[k]-p))
end

println("\n\n\n=======================================","\n","QL′, QΛ′ (based on corrections - p not used/known)","\n")
s = zeros(BigFloat,n)
s[2:n] = abs.(x[2:n] - x[1:n-1])
QL′ = zeros(BigFloat,n)
QΛ′ = zeros(BigFloat,n)
QL′[3] = log(s[3])/log(s[2])
println("k=3\nQL′(k)=     ",QL′[3],"\n|p-QL′(k)|= ",abs(QL′[k]-p),"\n")
for k=4:n
    println("k=",k)
    QL′[k] = log(s[k])/log(s[k-1])
    QΛ′[k] = log(s[k]/s[k-1])/log(s[k-1]/s[k-2])
    println("QL′(k)=     ",QL′[k])
    println("|p-QL′(k)|= ",abs(QL′[k]-p))
    println("QΛ′(k)=     ",QΛ′[k])
    println("|p-QΛ′(k)|= ",abs(QΛ′[k]-p),"\n")
end
